// Mocks generated by Mockito 5.3.0 from annotations
// in morphosis_template/test/core/global/utils/perf/perf_monitor_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dio/dio.dart' as _i3;
import 'package:firebase_performance/firebase_performance.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:morphosis_template/core/global/util/perf/perf_monitor.dart'
    as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeHttpMetric_0 extends _i1.SmartFake implements _i2.HttpMetric {
  _FakeHttpMetric_0(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeResponse_1<T> extends _i1.SmartFake implements _i3.Response<T> {
  _FakeResponse_1(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

/// A class which mocks [PerfMonitor].
///
/// See the documentation for Mockito's code generation for more information.
class MockPerfMonitor extends _i1.Mock implements _i4.PerfMonitor {
  MockPerfMonitor() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<bool> checkIsEnabled() =>
      (super.noSuchMethod(Invocation.method(#checkIsEnabled, []),
          returnValue: _i5.Future<bool>.value(false)) as _i5.Future<bool>);
  @override
  void setEnabled({bool? enabled}) => super.noSuchMethod(
      Invocation.method(#setEnabled, [], {#enabled: enabled}),
      returnValueForMissingStub: null);
  @override
  _i5.Future<_i2.HttpMetric> startNewMetric(
          String? url, _i2.HttpMethod? httpMethod) =>
      (super.noSuchMethod(Invocation.method(#startNewMetric, [url, httpMethod]),
              returnValue: _i5.Future<_i2.HttpMetric>.value(_FakeHttpMetric_0(
                  this, Invocation.method(#startNewMetric, [url, httpMethod]))))
          as _i5.Future<_i2.HttpMetric>);
  @override
  _i5.Future<_i3.Response<T>> fetchWithMetrics<T>(
          _i3.RequestOptions? requestOptions) =>
      (super.noSuchMethod(
              Invocation.method(#fetchWithMetrics, [requestOptions]),
              returnValue: _i5.Future<_i3.Response<T>>.value(_FakeResponse_1<T>(
                  this,
                  Invocation.method(#fetchWithMetrics, [requestOptions]))))
          as _i5.Future<_i3.Response<T>>);
  @override
  _i5.Future<void> runTestTrace1() => (super.noSuchMethod(
      Invocation.method(#runTestTrace1, []),
      returnValue: _i5.Future<void>.value(),
      returnValueForMissingStub: _i5.Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> runTestTrace2() => (super.noSuchMethod(
      Invocation.method(#runTestTrace2, []),
      returnValue: _i5.Future<void>.value(),
      returnValueForMissingStub: _i5.Future<void>.value()) as _i5.Future<void>);
  @override
  void runTestAPIMetric() =>
      super.noSuchMethod(Invocation.method(#runTestAPIMetric, []),
          returnValueForMissingStub: null);
  @override
  void runTests() => super.noSuchMethod(Invocation.method(#runTests, []),
      returnValueForMissingStub: null);
}
